//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""ChessMatchInput"",
            ""id"": ""9f14b96e-4e47-49b4-af7f-fe0b912a56fa"",
            ""actions"": [
                {
                    ""name"": ""Point"",
                    ""type"": ""Value"",
                    ""id"": ""5c32b8e7-8191-4485-80b5-e17eca63d50d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""753ed8e9-ce32-4ce4-a38c-1f3dd50c90b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""48d8cadc-cbfe-4c9d-9271-10dbb5ce0e91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""d7d129b6-7cde-4cb2-89c0-897a9c9cfea0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""ccfed8a3-4790-4f23-ba83-02a22161a948"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1b98cc8a-d33b-4fc5-bb60-b6b899839ff2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DPadMove"",
                    ""type"": ""Value"",
                    ""id"": ""2098eb35-5743-4d70-b4e5-f7adc0522cc5"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1db9e677-49c1-492b-b265-0a06d537c28e"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f27dc72e-6611-4a66-9b82-c18a3e0fc7a6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a07ca284-1706-416d-9c55-cfe57af255ff"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88e9c58c-aef9-471d-9e87-083a7c0d63fb"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5328bef5-aa11-48a4-b8be-86c9103c5ddb"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27ca3c5e-094a-43a6-90b2-a423f3171aff"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9602c433-5634-4644-bc63-cbde2645fc47"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a1aad27-90d3-4864-9a0a-1b65e433cb6e"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31a074a7-92c9-4efb-ab5a-b6ef1410cf09"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DPadMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ChessMatchInput
        m_ChessMatchInput = asset.FindActionMap("ChessMatchInput", throwIfNotFound: true);
        m_ChessMatchInput_Point = m_ChessMatchInput.FindAction("Point", throwIfNotFound: true);
        m_ChessMatchInput_Click = m_ChessMatchInput.FindAction("Click", throwIfNotFound: true);
        m_ChessMatchInput_RightClick = m_ChessMatchInput.FindAction("RightClick", throwIfNotFound: true);
        m_ChessMatchInput_Confirm = m_ChessMatchInput.FindAction("Confirm", throwIfNotFound: true);
        m_ChessMatchInput_Cancel = m_ChessMatchInput.FindAction("Cancel", throwIfNotFound: true);
        m_ChessMatchInput_Move = m_ChessMatchInput.FindAction("Move", throwIfNotFound: true);
        m_ChessMatchInput_DPadMove = m_ChessMatchInput.FindAction("DPadMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ChessMatchInput
    private readonly InputActionMap m_ChessMatchInput;
    private List<IChessMatchInputActions> m_ChessMatchInputActionsCallbackInterfaces = new List<IChessMatchInputActions>();
    private readonly InputAction m_ChessMatchInput_Point;
    private readonly InputAction m_ChessMatchInput_Click;
    private readonly InputAction m_ChessMatchInput_RightClick;
    private readonly InputAction m_ChessMatchInput_Confirm;
    private readonly InputAction m_ChessMatchInput_Cancel;
    private readonly InputAction m_ChessMatchInput_Move;
    private readonly InputAction m_ChessMatchInput_DPadMove;
    public struct ChessMatchInputActions
    {
        private @NewControls m_Wrapper;
        public ChessMatchInputActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Point => m_Wrapper.m_ChessMatchInput_Point;
        public InputAction @Click => m_Wrapper.m_ChessMatchInput_Click;
        public InputAction @RightClick => m_Wrapper.m_ChessMatchInput_RightClick;
        public InputAction @Confirm => m_Wrapper.m_ChessMatchInput_Confirm;
        public InputAction @Cancel => m_Wrapper.m_ChessMatchInput_Cancel;
        public InputAction @Move => m_Wrapper.m_ChessMatchInput_Move;
        public InputAction @DPadMove => m_Wrapper.m_ChessMatchInput_DPadMove;
        public InputActionMap Get() { return m_Wrapper.m_ChessMatchInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChessMatchInputActions set) { return set.Get(); }
        public void AddCallbacks(IChessMatchInputActions instance)
        {
            if (instance == null || m_Wrapper.m_ChessMatchInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ChessMatchInputActionsCallbackInterfaces.Add(instance);
            @Point.started += instance.OnPoint;
            @Point.performed += instance.OnPoint;
            @Point.canceled += instance.OnPoint;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @DPadMove.started += instance.OnDPadMove;
            @DPadMove.performed += instance.OnDPadMove;
            @DPadMove.canceled += instance.OnDPadMove;
        }

        private void UnregisterCallbacks(IChessMatchInputActions instance)
        {
            @Point.started -= instance.OnPoint;
            @Point.performed -= instance.OnPoint;
            @Point.canceled -= instance.OnPoint;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @DPadMove.started -= instance.OnDPadMove;
            @DPadMove.performed -= instance.OnDPadMove;
            @DPadMove.canceled -= instance.OnDPadMove;
        }

        public void RemoveCallbacks(IChessMatchInputActions instance)
        {
            if (m_Wrapper.m_ChessMatchInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IChessMatchInputActions instance)
        {
            foreach (var item in m_Wrapper.m_ChessMatchInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ChessMatchInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ChessMatchInputActions @ChessMatchInput => new ChessMatchInputActions(this);
    public interface IChessMatchInputActions
    {
        void OnPoint(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnDPadMove(InputAction.CallbackContext context);
    }
}
